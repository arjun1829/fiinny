name: iOS IPA (archive, export, upload)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  ios:
    runs-on: macos-14

    env:
      BUNDLE_ID: ${{ secrets.BUNDLE_ID }}               # e.g. com.fiinny.app
      TEAM_ID: ${{ secrets.TEAM_ID }}                   # e.g. ABCDE12345
      P12_BASE64: ${{ secrets.P12_BASE64 }}             # base64 of Apple Distribution .p12
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}         # password for the .p12
      PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }} # base64 of App Store .mobileprovision
      APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}         # App Store Connect API Key ID
      APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}   # App Store Connect Issuer ID
      APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }} # base64 of AuthKey_XXXXXX.p8

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      # Caches
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            ~/.cocoapods/repos
            ~/Library/Caches/CocoaPods
            ios/Pods
          key: pods-${{ runner.os }}-xcode16_2-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            pods-${{ runner.os }}-xcode16_2-

      - name: Cache Flutter pub cache
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-${{ runner.os }}-

      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: dd-${{ runner.os }}-xcode16_2-${{ hashFiles('ios/Podfile.lock', 'ios/Runner.xcodeproj/project.pbxproj') }}
          restore-keys: |
            dd-${{ runner.os }}-xcode16_2-

      # Tooling
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      - name: Ensure CocoaPods & install pods
        shell: bash
        run: |
          set -euxo pipefail
          sudo gem install cocoapods -N || true
          cd ios
          if [ ! -d "Pods" ]; then
            pod repo update
          fi
          pod install --repo-update --clean-install
          cd ..
      - name: "Debug: show Pod signing flags"
        shell: bash
        run: |
          set -euxo pipefail
          xcodebuild -project ios/Pods/Pods.xcodeproj -target 'Pods-Runner' -showBuildSettings \
            | egrep 'CODE_SIGN|PROVISION|DEVELOPMENT_TEAM' || true
      

      # Signing material
      - name: Create keychain & import Distribution certificate (.p12)
        shell: bash
        run: |
          set -euxo pipefail
          KEYCHAIN="$RUNNER_TEMP/build.keychain"
          KEYCHAIN_PWD=$(uuidgen)
          security create-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN"
          printf '%s' "$P12_BASE64" | base64 -D > cert.p12
          security import cert.p12 -k "$KEYCHAIN" -P "$P12_PASSWORD" -A
          security list-keychains -s "$KEYCHAIN" $(security list-keychains | sed 's/["]//g')
          security default-keychain -s "$KEYCHAIN"

      - name: Install provisioning profile
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          printf '%s' "$PROVISIONING_PROFILE_BASE64" | base64 -D > "$RUNNER_TEMP/profile.mobileprovision"
          DECODED_PLIST="$RUNNER_TEMP/profile.plist"
          /usr/bin/security cms -D -i "$RUNNER_TEMP/profile.mobileprovision" -o "$DECODED_PLIST"
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" "$DECODED_PLIST")
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" "$DECODED_PLIST")
          echo "PROFILE_UUID=$PROFILE_UUID" >> "$GITHUB_ENV"
          echo "PROFILE_NAME=$PROFILE_NAME" >> "$GITHUB_ENV"
          cp "$RUNNER_TEMP/profile.mobileprovision" "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"
          echo "Installed profile: $PROFILE_NAME ($PROFILE_UUID)"

      - name: Write App Store Connect API key (AuthKey)
        shell: bash
        run: |
          set -euxo pipefail
          echo "$APPLE_API_KEY_BASE64" | base64 --decode > "AuthKey_${APPLE_KEY_ID}.p8"

      # Build
      - name: Prebuild iOS (no codesign)
        run: flutter build ios --release --no-codesign

      - name: Xcode Archive (Pods unsigned, Runner automatic)
        shell: bash
        run: |
          set -euxo pipefail
          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -sdk iphoneos \
            -archivePath build/Runner.xcarchive \
            clean archive \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGNING_ALLOWED=YES \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGN_STYLE=Automatic \
            PROVISIONING_PROFILE_SPECIFIER= \
            PROVISIONING_PROFILE= \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            -allowProvisioningUpdates

      - name: Create ExportOptions.plist (app-store, manual)
        shell: bash
        run: |
          set -euxo pipefail
          EXPORT_OPTS="ios/ExportOptions.plist"
          /usr/libexec/PlistBuddy -c 'Clear dict' "$EXPORT_OPTS" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c 'Add : dict' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :method string app-store' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :signingStyle string manual' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c "Add :teamID string ${TEAM_ID}" "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :provisioningProfiles dict' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:${BUNDLE_ID} string ${PROFILE_NAME}" "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :stripSwiftSymbols bool true' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :compileBitcode bool false' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :destination string export' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Print' "$EXPORT_OPTS" || true

      - name: Xcode Export (IPA)
        shell: bash
        run: |
          set -euxo pipefail
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build \
            -allowProvisioningUpdates

      - name: Rename IPA for artifact
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f build/Runner.ipa ]; then
            mv build/Runner.ipa build/fiinny.ipa
          fi

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: fiinny-ipa
          path: build/fiinny.ipa

      - name: Upload to App Store Connect (Transporter, API key)
        shell: bash
        env:
          ASC_KEY_ID: ${{ env.APPLE_KEY_ID }}
          ASC_ISSUER_ID: ${{ env.APPLE_ISSUER_ID }}
        run: |
          set -euxo pipefail
          # Ensure the API key is where Transporter looks for it
          mkdir -p "$HOME/.appstoreconnect/private_keys"
          cp "AuthKey_${ASC_KEY_ID}.p8" "$HOME/.appstoreconnect/private_keys/AuthKey_${ASC_KEY_ID}.p8"

          xcrun iTMSTransporter -m upload \
            -assetFile build/fiinny.ipa \
            -apiKey "$ASC_KEY_ID" \
            -apiIssuer "$ASC_ISSUER_ID" \
            -v informational
      
