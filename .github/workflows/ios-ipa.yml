

           security default-keychain -s "$KEYCHAIN"
          security find-identity -p codesigning -v || true

      - name: Install Provisioning Profile
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > "$RUNNER_TEMP/profile.mobileprovision"
          DECODED_PLIST="$RUNNER_TEMP/profile.plist"
          security cms -D -i "$RUNNER_TEMP/profile.mobileprovision" -o "$DECODED_PLIST"
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" "$DECODED_PLIST")
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" "$DECODED_PLIST")
          echo "PROFILE_NAME=$PROFILE_NAME" >> "$GITHUB_ENV"
          echo "PROFILE_UUID=$PROFILE_UUID" >> "$GITHUB_ENV"
          cp "$RUNNER_TEMP/profile.mobileprovision" "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"

      - name: Set Bundle ID, Team, Manual Sign & Profile Specifier
        shell: bash
        run: |
          set -euxo pipefail
          PBX="ios/Runner.xcodeproj/project.pbxproj"
          # Bundle ID
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = ${BUNDLE_ID};/g" "$PBX" || true
          # Team
          sed -i '' "s/DEVELOPMENT_TEAM = [A-Z0-9]*;/DEVELOPMENT_TEAM = ${TEAM_ID};/g" "$PBX" || true
          # Manual signing style
          sed -i '' "s/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g" "$PBX" || true
          # Ensure specifier lines exist / updated
          if ! grep -q "PROVISIONING_PROFILE_SPECIFIER" "$PBX"; then
            /usr/bin/perl -0777 -pe "s/(CODE_SIGN_IDENTITY = .+?;)/\\1\n\t\t\t\tPROVISIONING_PROFILE_SPECIFIER = ${PROFILE_NAME};/gs" -i "$PBX"
          else
            sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = [^;]*;/PROVISIONING_PROFILE_SPECIFIER = ${PROFILE_NAME};/g" "$PBX" || true
          fi

      - name: Bump Build Number from GitHub run
        shell: bash
        run: |
          sed -i '' -E "s/^version: .*/version: 1.0.0+${GITHUB_RUN_NUMBER}/" pubspec.yaml
          cat pubspec.yaml
      

      - name: Prepare ExportOptions.plist
        shell: bash
        run: |
          set -euxo pipefail
          EXPORT_OPTS="ios/ExportOptions.plist"
          # Create a fresh empty plist reliably (PlistBuddy can't create from scratch)
          cat > "$EXPORT_OPTS" <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict/></plist>
          PLIST
          /usr/libexec/PlistBuddy -c 'Add :method string app-store' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :signingStyle string manual' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c "Add :teamID string ${TEAM_ID}" "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :provisioningProfiles dict' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:${BUNDLE_ID} string ${PROFILE_NAME}" "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :stripSwiftSymbols bool true' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :compileBitcode bool false' "$EXPORT_OPTS"

      - name: Build IPA (signed)
        shell: bash
        run: |
          set -euxo pipefail
          flutter build ipa --release \
            --build-number "${GITHUB_RUN_NUMBER}" \
            --export-options-plist ios/ExportOptions.plist
          ls -lah build/ios/ipa || true
          ls -lah build/ios/archive || true

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fiinny-ipa
          path: build/ios/ipa/*.ipa
          if-no-files-found: error
          retention-days: 7

      - name: Upload xcarchive (debugging)
        uses: actions/upload-artifact@v4
        with:
          name: fiinny-xcarchive
          path: build/ios/archive/*.xcarchive
          if-no-files-found: warn
          retention-days: 7

      - name: Install Fastlane
        shell: bash
        run: |
          set -euxo pipefail
          sudo gem install fastlane -N

      - name: Create ASC API Key JSON
        shell: bash
        run: |
          set -euxo pipefail
          [[ -n "${APPLE_API_KEY_BASE64:-}" ]] || { echo "APPLE_API_KEY_BASE64 is missing"; exit 1; }
          [[ -n "${APPLE_KEY_ID:-}"        ]] || { echo "APPLE_KEY_ID is missing"; exit 1; }
          [[ -n "${APPLE_ISSUER_ID:-}"     ]] || { echo "APPLE_ISSUER_ID is missing"; exit 1; }
          echo "$APPLE_API_KEY_BASE64" | base64 --decode > "AuthKey_${APPLE_KEY_ID}.p8"
          chmod 600 "AuthKey_${APPLE_KEY_ID}.p8"
          python3 - <<'PY' > api_key.json
          import os, json
          kid = os.environ["APPLE_KEY_ID"]
          iss = os.environ["APPLE_ISSUER_ID"]
          with open(f"AuthKey_{kid}.p8","r") as f:
          key = f.read()
          print(json.dumps({"key_id": kid, "issuer_id": iss, "key": key}))
          PY

      - name: Upload to TestFlight
        env:
          PILOT_DISABLE_IMPLICIT_TEAM_SELECTION: "true"
        shell: bash
        run: |
          set -euxo pipefail
          IPA_PATH="$(ls -1 build/ios/ipa/*.ipa | head -n 1)"
          echo "Uploading: ${IPA_PATH}"
          fastlane pilot upload \
            --ipa "${IPA_PATH}" \
            --api_key_path api_key.json \
            --skip_submission \
            --skip_waiting_for_build_processing

      - name: Notify Slack (Success)
        if: success() && env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "âœ… Fiinny iOS build uploaded to TestFlight!"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}

      - name: Notify Slack (Failure)
        if: failure() && env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.24.0
        with:
