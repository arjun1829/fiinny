name: iOS IPA (Flutter export + ASC upload)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "ios/**"
      - "lib/**"
      - "pubspec.*"
      - ".github/workflows/**"

concurrency:
  group: ios-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios:
    runs-on: macos-14
    env:
      BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
      TEAM_ID: ${{ secrets.TEAM_ID }}
      P12_BASE64: ${{ secrets.P12_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
      APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
      APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
      CI: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode (latest 16.x)
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16'

      # CACHES
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            ~/.cocoapods/repos
            ~/Library/Caches/CocoaPods
            ios/Pods
          key: pods-${{ runner.os }}-xcode16-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            pods-${{ runner.os }}-xcode16-

      - name: Cache Flutter pub cache
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-${{ runner.os }}-

      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: dd-${{ runner.os }}-xcode16-${{ hashFiles('ios/Podfile.lock', 'ios/Runner.xcodeproj/project.pbxproj') }}
          restore-keys: |
            dd-${{ runner.os }}-xcode16-

      # TOOLING
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Install CocoaPods & xcbeautify
        shell: bash
        run: |
          set -euxo pipefail
          sudo gem install cocoapods -N || true
          brew install xcbeautify || true

      # DEPS
      - name: flutter pub get
        run: flutter pub get

      - name: Enforce iOS 16 & clean Pods
        shell: bash
        run: |
          set -euxo pipefail
          /usr/bin/sed -i '' "s/platform :ios, .*/platform :ios, '16.0'/" ios/Podfile || true
          rm -rf ios/Pods ios/Podfile.lock

      - name: Install Pods
        shell: bash
        run: |
          set -euxo pipefail
          cd ios
          pod repo update
          pod install --repo-update --clean-install
          cd ..

      # 🔧 Force correct bundle id & team inside the Xcode project
      - name: Set bundle identifier & team in project
        shell: bash
        run: |
          set -euxo pipefail
          PBX="ios/Runner.xcodeproj/project.pbxproj"
          /usr/bin/sed -i '' "s/com\.example\.[A-Za-z0-9_-]*/${BUNDLE_ID}/g" "$PBX" || true
          /usr/bin/sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = ${BUNDLE_ID};/g" "$PBX"
          if grep -q "DEVELOPMENT_TEAM =" "$PBX"; then
            /usr/bin/sed -i '' "s/DEVELOPMENT_TEAM = [A-Z0-9]*;/DEVELOPMENT_TEAM = ${TEAM_ID};/g" "$PBX"
          else
            /usr/bin/sed -i '' "s/CODE_SIGN_STYLE = [A-Za-z]*/&; DEVELOPMENT_TEAM = ${TEAM_ID}/g" "$PBX" || true
          fi
          if /usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" ios/Runner/Info.plist >/dev/null 2>&1; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier ${BUNDLE_ID}" ios/Runner/Info.plist || true
          fi
          /usr/bin/sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = .*RunnerTests;/PRODUCT_BUNDLE_IDENTIFIER = ${BUNDLE_ID}.RunnerTests;/g" "$PBX" || true
          /usr/bin/sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = .*RunnerUITests;/PRODUCT_BUNDLE_IDENTIFIER = ${BUNDLE_ID}.RunnerUITests;/g" "$PBX" || true

      # SIGNING (manual)
      - name: Create keychain & import Apple Distribution (.p12)
        shell: bash
        run: |
          set -euxo pipefail
          KEYCHAIN="$RUNNER_TEMP/build.keychain"
          KPWD=$(uuidgen)
          security create-keychain -p "$KPWD" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$KPWD" "$KEYCHAIN"
          printf '%s' "$P12_BASE64" | base64 -D > cert.p12
          security import cert.p12 -k "$KEYCHAIN" -P "$P12_PASSWORD" -A
          security list-keychains -s "$KEYCHAIN" $(security list-keychains | sed 's/["]//g')
          security default-keychain -s "$KEYCHAIN"

      - name: Install provisioning profile
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          printf '%s' "$PROVISIONING_PROFILE_BASE64" | base64 -D > "$RUNNER_TEMP/profile.mobileprovision"
          DECODED_PLIST="$RUNNER_TEMP/profile.plist"
          /usr/bin/security cms -D -i "$RUNNER_TEMP/profile.mobileprovision" -o "$DECODED_PLIST"
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" "$DECODED_PLIST")
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" "$DECODED_PLIST")
          APP_ID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' "$DECODED_PLIST")
          PF_BUNDLE_ID="${APP_ID#*.}"
          echo "PROFILE_NAME=$PROFILE_NAME" >> "$GITHUB_ENV"
          echo "PROFILE_UUID=$PROFILE_UUID" >> "$GITHUB_ENV"
          test "$PF_BUNDLE_ID" = "$BUNDLE_ID"
          cp "$RUNNER_TEMP/profile.mobileprovision" "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"

      - name: Create ExportOptions.plist (manual signing)
        shell: bash
        run: |
          set -euxo pipefail
          EXPORT_OPTS="ios/ExportOptions.plist"
          /usr/libexec/PlistBuddy -c 'Clear dict' "$EXPORT_OPTS" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c 'Add : dict' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :method string app-store' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :signingStyle string manual' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c "Add :teamID string ${TEAM_ID}" "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :provisioningProfiles dict' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:${BUNDLE_ID} string ${PROFILE_NAME}" "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :stripSwiftSymbols bool true' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :compileBitcode bool false' "$EXPORT_OPTS"

      # Generate configs, then build & export via Flutter
      - name: Prepare Flutter iOS Release configuration
        shell: bash
        run: |
          set -euxo pipefail
          flutter build ios --config-only --release

      - name: Build & export IPA via Flutter
        shell: bash
        run: |
          set -euxo pipefail
          flutter build ipa --release --export-options-plist ios/ExportOptions.plist
          ls -lah build/ios/ipa || true
          if [ -f build/ios/ipa/*.ipa ]; then
            IPA_FILE=$(ls -1 build/ios/ipa/*.ipa | head -n1)
            cp "$IPA_FILE" build/Fiinny.ipa
          fi

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: fiinny-ipa
          path: build/Fiinny.ipa

      # 🚚 Upload via Fastlane Pilot (reliable)
      - name: Install fastlane
        shell: bash
        run: |
          set -euxo pipefail
          sudo gem install fastlane -N

      - name: Write App Store Connect API key (fastlane JSON)
        shell: bash
        env:
          ASC_KEY_ID: ${{ env.APPLE_KEY_ID }}
          ASC_ISSUER_ID: ${{ env.APPLE_ISSUER_ID }}
          APPLE_API_KEY_BASE64: ${{ env.APPLE_API_KEY_BASE64 }}
        run: |
          set -euxo pipefail
          # decode .p8
          echo "$APPLE_API_KEY_BASE64" | base64 --decode > "AuthKey_${ASC_KEY_ID}.p8"
          chmod 600 "AuthKey_${ASC_KEY_ID}.p8"

          # build api_key.json via Python ONE-LINER (no indentation issues)
          python3 -c 'import os,json,sys; kid=os.environ["ASC_KEY_ID"]; iss=os.environ["ASC_ISSUER_ID"]; key=open(f"AuthKey_{kid}.p8","r").read(); print(json.dumps({"key_id":kid,"issuer_id":iss,"key":key,"in_house":False}))' > api_key.json

          chmod 600 api_key.json
          echo "api_key.json created."

      - name: Upload to TestFlight via fastlane pilot
        shell: bash
        run: |
          set -euxo pipefail
          test -f build/Fiinny.ipa
          fastlane pilot upload \
          --api_key_path api_key.json \
          --ipa build/Fiinny.ipa \
          --skip_submission \
          --skip_waiting_for_build_processing \
          --verbose
