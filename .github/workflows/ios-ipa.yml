name: build signed iOS IPA via GitHub Actions

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  ios:
    runs-on: macos-14

    env:
      BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
      TEAM_ID: ${{ secrets.TEAM_ID }}
      P12_BASE64: ${{ secrets.P12_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
      APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
      APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}

    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      - name: Ensure CocoaPods
        run: |
          sudo gem install cocoapods -N || true
          cd ios && pod repo update && pod install --repo-update && cd ..

      - name: Create Keychain & import .p12
        shell: bash
        run: |
          set -euxo pipefail
          KEYCHAIN="$RUNNER_TEMP/build.keychain"
          KEYCHAIN_PWD=$(uuidgen)
          security create-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN"

          # decode P12 correctly (single line with a pipe!)
          printf '%s' "$P12_BASE64" | base64 -D > cert.p12     # <- use -D on macOS

          ls -lh cert.p12   # sanity check
          security import cert.p12 -k "$KEYCHAIN" -P "$P12_PASSWORD" -A
          security list-keychains -s "$KEYCHAIN" $(security list-keychains | sed 's/[""]//g')
          security default-keychain -s "$KEYCHAIN"
      

      - name: Install provisioning profile (robust)
        shell: bash
        run: |
          set -euxo pipefail

          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"

          # 1) Decode from Base64 (macOS uses -D)
          printf '%s' "$PROVISIONING_PROFILE_BASE64" | base64 -D > "$RUNNER_TEMP/profile.mobileprovision"

          # Quick sanity
          ls -lh "$RUNNER_TEMP/profile.mobileprovision"
          file "$RUNNER_TEMP/profile.mobileprovision" || true

          # 2) Try to extract plist using 'security cms'
          DECODED_PLIST="$RUNNER_TEMP/profile.plist"
          if ! /usr/bin/security cms -D -i "$RUNNER_TEMP/profile.mobileprovision" -o "$DECODED_PLIST"; then
            echo "security cms failed; trying OpenSSL smime fallback"
            # 3) Fallback: OpenSSL (DER CMS → plist)
            if ! openssl smime -inform der -verify -noverify \
                -in "$RUNNER_TEMP/profile.mobileprovision" -out "$DECODED_PLIST"; then
              echo "OpenSSL decode failed; assuming the file is already a plist"
              cp "$RUNNER_TEMP/profile.mobileprovision" "$DECODED_PLIST"
            fi
          fi

          # Make sure we now have a plist
          plutil -p "$DECODED_PLIST" >/dev/null

          # 4) Extract UUID
          UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" "$DECODED_PLIST")

          # 5) Install profile using the UUID filename
          cp "$RUNNER_TEMP/profile.mobileprovision" \
             "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"

          # 6) Export for later steps if needed
          echo "PROFILE_UUID=$UUID" >> "$GITHUB_ENV"
      

      - name: Create ASC API key JSON (for fallback)
        shell: bash
        run: |
          set -euxo pipefail
          echo "$APPLE_API_KEY_BASE64" | base64 --decode > "AuthKey_${APPLE_KEY_ID}.p8"
          KEY_CONTENT=$(awk '{printf "%s\\n",$0}' "AuthKey_${APPLE_KEY_ID}.p8")
          cat > asc_api_key.json <<JSON
          {
            "key_id": "${APPLE_KEY_ID}",
            "issuer_id": "${APPLE_ISSUER_ID}",
            "key": "$KEY_CONTENT",
            "in_house": false
          }
          JSON

      - name: Prebuild iOS (no codesign)
        run: flutter build ios --release --no-codesign

      - name: Build signed IPA
        shell: bash
        run: |
          set -euxo pipefail
          if [ -n "${PROFILE_UUID:-}" ]; then
            EXPORT_OPTS="$RUNNER_TEMP/ExportOptions.plist"
            cat > "$EXPORT_OPTS" <<PLIST
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0"><dict>
              <key>method</key><string>app-store</string>
              <key>signingStyle</key><string>manual</string>
              <key>teamID</key><string>${TEAM_ID}</string>
              <key>provisioningProfiles</key><dict><key>${BUNDLE_ID}</key><string>${PROFILE_UUID}</string></dict>
            </dict></plist>
            PLIST
            fastlane gym \
              --workspace ios/Runner.xcworkspace \
              --scheme Runner \
              --configuration Release \
              --export_options "$EXPORT_OPTS" \
              --output_directory build/ios/ipa \
              --output_name fiinny.ipa
          else
            fastlane sigh --api_key_path asc_api_key.json \
                          --app_identifier "$BUNDLE_ID" \
                          --team_id "$TEAM_ID" \
                          --readonly false \
                          --adhoc false \
                          --skip_certificate_verification true
            fastlane gym \
              --workspace ios/Runner.xcworkspace \
              --scheme Runner \
              --configuration Release \
              --export_method app-store \
              --api_key_path asc_api_key.json \
              --output_directory build/ios/ipa \
              --output_name fiinny.ipa
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: fiinny-ipa
          path: build/ios/ipa/fiinny.ipa
