name: build signed iOS IPA via GitHub Actions

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  ios:
    # Larger runner = noticeably faster iOS builds
    runs-on: macos-14-large

    env:
      BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
      TEAM_ID: ${{ secrets.TEAM_ID }}
      P12_BASE64: ${{ secrets.P12_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
      APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
      APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      # ---------- CACHES (big time-savers) ----------
      - name: Cache CocoaPods (repos and artifacts)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cocoapods/repos
            ~/Library/Caches/CocoaPods
            ios/Pods
          key: pods-${{ runner.os }}-xcode16_2-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            pods-${{ runner.os }}-xcode16_2-

      - name: Cache Flutter pub cache
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-${{ runner.os }}-

      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: dd-${{ runner.os }}-xcode16_2-${{ hashFiles('ios/Podfile.lock', 'ios/Runner.xcodeproj/project.pbxproj') }}
          restore-keys: |
            dd-${{ runner.os }}-xcode16_2-

      # ---------- TOOLING ----------
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      - name: Ensure CocoaPods & install pods
        shell: bash
        run: |
          set -euxo pipefail
          sudo gem install cocoapods -N || true
          cd ios
          # Use update only when cache misses to avoid long repo refreshes
          if [ ! -d "Pods" ]; then
            pod repo update
          fi
          pod install --repo-update
          cd ..

      # ---------- SIGNING MATERIAL ----------
      - name: Create Keychain & import .p12
        shell: bash
        run: |
          set -euxo pipefail
          KEYCHAIN="$RUNNER_TEMP/build.keychain"
          KEYCHAIN_PWD=$(uuidgen)
          security create-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN"

          # Decode P12 on macOS (-D)
          printf '%s' "$P12_BASE64" | base64 -D > cert.p12
          security import cert.p12 -k "$KEYCHAIN" -P "$P12_PASSWORD" -A
          security list-keychains -s "$KEYCHAIN" $(security list-keychains | sed 's/["]//g')
          security default-keychain -s "$KEYCHAIN"

      - name: Install provisioning profile
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          printf '%s' "$PROVISIONING_PROFILE_BASE64" | base64 -D > "$RUNNER_TEMP/profile.mobileprovision"

          DECODED_PLIST="$RUNNER_TEMP/profile.plist"
          /usr/bin/security cms -D -i "$RUNNER_TEMP/profile.mobileprovision" -o "$DECODED_PLIST"
          plutil -p "$DECODED_PLIST" >/dev/null
          UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" "$DECODED_PLIST")
          cp "$RUNNER_TEMP/profile.mobileprovision" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          echo "PROFILE_UUID=$UUID" >> "$GITHUB_ENV"
          echo "Installed profile UUID: $UUID"

      - name: Create ASC API key JSON (fallback)
        shell: bash
        run: |
          set -euxo pipefail
          echo "$APPLE_API_KEY_BASE64" | base64 --decode > "AuthKey_${APPLE_KEY_ID}.p8"
          KEY_CONTENT=$(awk '{printf "%s\\n",$0}' "AuthKey_${APPLE_KEY_ID}.p8")
          cat > asc_api_key.json <<JSON
          {
            "key_id": "${APPLE_KEY_ID}",
            "issuer_id": "${APPLE_ISSUER_ID}",
            "key": "$KEY_CONTENT",
            "in_house": false
          }
          JSON

      # ---------- BUILD ----------
      - name: Prebuild iOS (no codesign)
        run: flutter build ios --release --no-codesign

      - name: Build signed IPA
        shell: bash
        run: |
          set -euxo pipefail

          # For ARCHIVE: set Runner’s signing hints (Pods are unsigned via Podfile)
          XCARGS="DEVELOPMENT_TEAM=${TEAM_ID} \
                  PRODUCT_BUNDLE_IDENTIFIER=${BUNDLE_ID} \
                  CODE_SIGNING_STYLE=Manual \
                  CODE_SIGN_IDENTITY=Apple\ Distribution \
                  PROVISIONING_PROFILE_SPECIFIER=${PROFILE_UUID:-}"

          if [ -n "${PROFILE_UUID:-}" ]; then
            # Build ExportOptions.plist with PlistBuddy (avoids heredoc pitfalls)
            EXPORT_OPTS="$RUNNER_TEMP/ExportOptions.plist"
            rm -f "$EXPORT_OPTS"
            /usr/libexec/PlistBuddy -c 'Add : dict' "$EXPORT_OPTS"
            /usr/libexec/PlistBuddy -c 'Add :method string app-store' "$EXPORT_OPTS"
            /usr/libexec/PlistBuddy -c 'Add :signingStyle string manual' "$EXPORT_OPTS"
            /usr/libexec/PlistBuddy -c "Add :teamID string ${TEAM_ID}" "$EXPORT_OPTS"
            /usr/libexec/PlistBuddy -c 'Add :provisioningProfiles dict' "$EXPORT_OPTS"
            /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:${BUNDLE_ID} string ${PROFILE_UUID}" "$EXPORT_OPTS"
            /usr/libexec/PlistBuddy -c 'Add :manageAppVersionAndBuildNumber bool false' "$EXPORT_OPTS"
            /usr/libexec/PlistBuddy -c 'Add :signingCertificate string Apple Distribution' "$EXPORT_OPTS"
            /usr/libexec/PlistBuddy -c 'Add :stripSwiftSymbols bool true' "$EXPORT_OPTS"
            /usr/libexec/PlistBuddy -c 'Print' "$EXPORT_OPTS" || true

            fastlane gym \
              --workspace ios/Runner.xcworkspace \
              --scheme Runner \
              --configuration Release \
              --export_options "$EXPORT_OPTS" \
              --xcargs "$XCARGS" \
              --output_directory build/ios/ipa \
              --output_name fiinny.ipa
          else
            # Fallback: fetch/install profile automatically using ASC API key
            fastlane sigh --api_key_path asc_api_key.json \
                          --app_identifier "$BUNDLE_ID" \
                          --team_id "$TEAM_ID" \
                          --readonly false \
                          --adhoc false \
                          --skip_certificate_verification true

            fastlane gym \
              --workspace ios/Runner.xcworkspace \
              --scheme Runner \
              --configuration Release \
              --export_method app-store \
              --api_key_path asc_api_key.json \
              --xcargs "$XCARGS" \
              --output_directory build/ios/ipa \
              --output_name fiinny.ipa
          fi

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: fiinny-ipa
          path: build/ios/ipa/fiinny.ipa
