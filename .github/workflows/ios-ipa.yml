name: iOS IPA (Flutter export + ASC upload)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "ios/**"
      - "lib/**"
      - "pubspec.*"
      - ".github/workflows/**"

concurrency:
  group: ios-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios:
    runs-on: macos-14
    env:
      CI: "true"
      # Required secrets
      BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
      TEAM_ID: ${{ secrets.TEAM_ID }}
      P12_BASE64: ${{ secrets.P12_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
      APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
      APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
      FIREBASE_IOS_PLIST_BASE64: ${{ secrets.FIREBASE_IOS_PLIST_BASE64 }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # Convenience
      WORKSPACE: ios/Runner.xcworkspace
      SCHEME: Runner
      CONFIGURATION: Release

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Cache Pub packages
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            ~/.cocoapods/repos
            ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: ${{ runner.os }}-pods-

      - name: Tool versions
        shell: bash
        run: |
          set -euxo pipefail
          flutter --version
          xcodebuild -version
          swift --version || true
          ruby --version || true
          pod --version || true

      - name: Flutter pub get (initial)
        shell: bash
        run: |
          set -euxo pipefail
          flutter pub get

      - name: Clean and enforce iOS 16
        shell: bash
        run: |
          set -euxo pipefail
          flutter clean
          /usr/bin/sed -i '' "s/platform :ios, .*/platform :ios, '16.0'/" ios/Podfile || true
          rm -rf ios/Pods ios/Podfile.lock
          # regenerate ios/Flutter/Generated.xcconfig after clean
          flutter pub get
          test -f ios/Flutter/Generated.xcconfig && echo "✅ Generated.xcconfig present"

      - name: Normalize Podfile quotes (optional)
        shell: bash
        run: |
          set -euxo pipefail
          python3 - <<'PY'
          p='ios/Podfile'
        try:
          s=open(p,encoding='utf-8',errors='replace').read()
        except FileNotFoundError:
          raise SystemExit(0)
          s=s.replace('“','"').replace('”','"').replace('‘',"\'").replace('’',"\'").replace('—','-')
          open(p,'w',encoding='utf-8').write(s)
          print('Normalized quotes in', p)
          PY

      # ---- CRITICAL FIXES FOR COCOAPODS PARSER ----
      - name: Strip UTF-8 BOMs from Xcode files (POSIX-safe)
        shell: bash
        run: |
          set -euo pipefail
          find ios \( -name '*.pbxproj' -o -name '*.plist' -o -name '*.xcconfig' -o -name '*.storyboard' -o -name '*.xcscheme' -o -name '*.entitlements' -o -name '*.pch' -o -name '*.h' -o -name '*.m' -o -name '*.mm' -o -name '*.swift' -o -name '*.rb' -o -name '*.sh' -o -name '*.txt' -o -name '*.xml' \) -type f -print0 \
          | xargs -0 -n1 perl -0777 -i -pe 'BEGIN { binmode(STDIN); binmode(STDOUT) } s/^\xEF\xBB\xBF//'

      - name: Normalize line endings to LF (avoid CRLF on macOS)
        shell: bash
        run: |
          set -euo pipefail
          find ios \( -name '*.pbxproj' -o -name '*.plist' -o -name '*.xcconfig' -o -name '*.storyboard' -o -name '*.xcscheme' -o -name '*.entitlements' -o -name '*.pch' -o -name '*.h' -o -name '*.m' -o -name '*.mm' -o -name '*.swift' -o -name '*.rb' -o -name '*.sh' -o -name '*.txt' -o -name '*.xml' \) -type f -print0 \
          | xargs -0 -n1 perl -pi -e 's/\r\n/\n/g'

      - name: Install CocoaPods (update repos)
        shell: bash
        run: |
          set -euxo pipefail
          sudo gem install cocoapods -N || true
          cd ios
          pod install --repo-update
          cd ..

      - name: Create GoogleService-Info.plist (if secret present)
        if: env.FIREBASE_IOS_PLIST_BASE64 != ''
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p ios/Runner
          echo "$FIREBASE_IOS_PLIST_BASE64" | base64 --decode > ios/Runner/GoogleService-Info.plist
          test -s ios/Runner/GoogleService-Info.plist && echo "✅ GoogleService-Info.plist created"

      - name: Add Google URL Scheme to Info.plist
        if: env.FIREBASE_IOS_PLIST_BASE64 != ''
        shell: bash
        run: |
          set -euxo pipefail
          GSP="ios/Runner/GoogleService-Info.plist"
          IP="ios/Runner/Info.plist"
          RID=$(/usr/libexec/PlistBuddy -c 'Print :REVERSED_CLIENT_ID' "$GSP")
          /usr/libexec/PlistBuddy -c 'Delete :CFBundleURLTypes' "$IP" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c 'Add :CFBundleURLTypes array' "$IP"
          /usr/libexec/PlistBuddy -c 'Add :CFBundleURLTypes:0 dict' "$IP"
          /usr/libexec/PlistBuddy -c 'Add :CFBundleURLTypes:0:CFBundleTypeRole string Editor' "$IP"
          /usr/libexec/PlistBuddy -c 'Add :CFBundleURLTypes:0:CFBundleURLSchemes array' "$IP"
          /usr/libexec/PlistBuddy -c "Add :CFBundleURLTypes:0:CFBundleURLSchemes:0 string $RID" "$IP"

      - name: Create Keychain & Import Certificate
        shell: bash
        run: |
          set -euxo pipefail
          KEYCHAIN="$RUNNER_TEMP/build.keychain"
          KPWD=$(uuidgen)
          security create-keychain -p "$KPWD" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$KPWD" "$KEYCHAIN"
          echo "$P12_BASE64" | base64 --decode > cert.p12
          security import cert.p12 -k "$KEYCHAIN" -P "$P12_PASSWORD" -A -T /usr/bin/codesign -T /usr/bin/security
          security list-keychains -s "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security find-identity -p codesigning -v || true

      - name: Install Provisioning Profile
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > "$RUNNER_TEMP/profile.mobileprovision"
          DECODED_PLIST="$RUNNER_TEMP/profile.plist"
          security cms -D -i "$RUNNER_TEMP/profile.mobileprovision" -o "$DECODED_PLIST"
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" "$DECODED_PLIST")
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" "$DECODED_PLIST")
          echo "PROFILE_NAME=$PROFILE_NAME" >> "$GITHUB_ENV"
          echo "PROFILE_UUID=$PROFILE_UUID" >> "$GITHUB_ENV"
          cp "$RUNNER_TEMP/profile.mobileprovision" "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"

      - name: Set Bundle ID, Team, Manual Sign & Profile Specifier
        shell: bash
        run: |
          set -euxo pipefail
          PBX="ios/Runner.xcodeproj/project.pbxproj"
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = ${BUNDLE_ID};/g" "$PBX" || true
          sed -i '' "s/DEVELOPMENT_TEAM = [A-Z0-9]*;/DEVELOPMENT_TEAM = ${TEAM_ID};/g" "$PBX" || true
          sed -i '' "s/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g" "$PBX" || true
          if ! grep -q "PROVISIONING_PROFILE_SPECIFIER" "$PBX"; then
            /usr/bin/perl -0777 -pe "s/(CODE_SIGN_IDENTITY = .+?;)/\\1\n\t\t\t\tPROVISIONING_PROFILE_SPECIFIER = ${PROFILE_NAME};/gs" -i "$PBX"
          else
            sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = [^;]*;/PROVISIONING_PROFILE_SPECIFIER = ${PROFILE_NAME};/g" "$PBX" || true
          fi

      - name: Disable Swift module interfaces (fix bridging-header error)
        shell: bash
        run: |
          set -euxo pipefail
          PBX="ios/Runner.xcodeproj/project.pbxproj"
          sed -i '' 's/BUILD_LIBRARY_FOR_DISTRIBUTION = YES;/BUILD_LIBRARY_FOR_DISTRIBUTION = NO;/g' "$PBX" || true
          sed -i '' 's/DEFINES_MODULE = YES;/DEFINES_MODULE = NO;/g' "$PBX" || true
          /usr/bin/perl -0777 -pe \
            "s/(name = Release;\\n\\t*buildSettings = \\{)/\\1\\n\\t\\t\\t\\tBUILD_LIBRARY_FOR_DISTRIBUTION = NO;\\n\\t\\t\\t\\tDEFINES_MODULE = NO;/s" \
            -i "$PBX" || true
          /usr/bin/perl -0777 -pe \
            "s/(name = Profile;\\n\\t*buildSettings = \\{)/\\1\\n\\t\\t\\t\\tBUILD_LIBRARY_FOR_DISTRIBUTION = NO;\\n\\t\\t\\t\\tDEFINES_MODULE = NO;/s" \
            -i "$PBX" || true

      - name: Force OFF Swift module interfaces via xcconfig
        shell: bash
        run: |
          set -euxo pipefail
          for f in ios/Flutter/Debug.xcconfig ios/Flutter/Release.xcconfig; do
            [ -f "$f" ] || touch "$f"
            sed -i '' '/^BUILD_LIBRARY_FOR_DISTRIBUTION/d' "$f" || true
            sed -i '' '/^DEFINES_MODULE/d' "$f" || true
            {
              echo 'BUILD_LIBRARY_FOR_DISTRIBUTION=NO'
              echo 'DEFINES_MODULE=NO'
            } >> "$f"
          done

      - name: Bump build number in pubspec.yaml (safe replace)
        shell: bash
        run: |
          set -euxo pipefail
          base_version="$(grep -m1 '^version:' pubspec.yaml | cut -d ':' -f2 | xargs | cut -d '+' -f1)"
          perl -0777 -pe "s/^version:\\s*[^\\r\\n]+/version: ${base_version}+${GITHUB_RUN_NUMBER}/m" pubspec.yaml > pubspec.yaml.tmp
          mv pubspec.yaml.tmp pubspec.yaml
          echo "Updated version to: $(grep -m1 '^version:' pubspec.yaml)"

      - name: Prepare ExportOptions.plist
        shell: bash
        run: |
          set -euxo pipefail
          EXPORT_OPTS="ios/ExportOptions.plist"
          cat > "$EXPORT_OPTS" <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict/></plist>
          PLIST
          /usr/libexec/PlistBuddy -c 'Add :method string app-store' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :signingStyle string manual' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c "Add :teamID string ${TEAM_ID}" "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :provisioningProfiles dict' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:${BUNDLE_ID} string ${PROFILE_NAME}" "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :stripSwiftSymbols bool true' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :compileBitcode bool false' "$EXPORT_OPTS"

      - name: Lint & sanity-check Info.plist
        shell: bash
        run: |
          set -euxo pipefail
          plutil -lint ios/Runner/Info.plist
          echo "---- CFBundleURLTypes ----"
          /usr/libexec/PlistBuddy -c 'Print :CFBundleURLTypes' ios/Runner/Info.plist || true
          echo "---- Launch/Main storyboards ----"
          /usr/libexec/PlistBuddy -c 'Print :UILaunchStoryboardName' ios/Runner/Info.plist || true
          /usr/libexec/PlistBuddy -c 'Print :UIMainStoryboardFile' ios/Runner/Info.plist || true

      - name: Ensure iOS privacy usage strings
        shell: bash
        run: |
          set -euo pipefail
          IP="ios/Runner/Info.plist"
          add_str() { /usr/libexec/PlistBuddy -c "Delete :$1" "$IP" 2>/dev/null || true; /usr/libexec/PlistBuddy -c "Add :$1 string $2" "$IP"; }
          add_str NSCameraUsageDescription              "Camera is used to scan receipts and take profile photos."
          add_str NSMicrophoneUsageDescription          "Microphone may be used while recording videos."
          add_str NSPhotoLibraryUsageDescription        "Photo library is used to pick images and receipts."
          add_str NSPhotoLibraryAddUsageDescription     "Photo library is used to save generated images."
          add_str NSContactsUsageDescription            "Contacts are used to help you connect with people you know."

      - name: Ensure export compliance key
        shell: bash
        run: |
          set -euo pipefail
          IP="ios/Runner/Info.plist"
          /usr/libexec/PlistBuddy -c "Delete :ITSAppUsesNonExemptEncryption" "$IP" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :ITSAppUsesNonExemptEncryption bool false" "$IP"

      - name: Force BLD=NO in project.pbxproj
        shell: bash
        run: |
          set -euo pipefail
          PBX="ios/Runner.xcodeproj/project.pbxproj"
          /usr/bin/sed -i '' "s/BUILD_LIBRARY_FOR_DISTRIBUTION = YES/BUILD_LIBRARY_FOR_DISTRIBUTION = NO/g" "$PBX" || true

      - name: Enable Background remote notifications (optional)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          IP="ios/Runner/Info.plist"
          /usr/libexec/PlistBuddy -c 'Delete :UIBackgroundModes' "$IP" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c 'Add :UIBackgroundModes array' "$IP"
          /usr/libexec/PlistBuddy -c 'Add :UIBackgroundModes:0 string remote-notification' "$IP"

      - name: Sanity check Firebase plist vs Bundle ID
        if: env.FIREBASE_IOS_PLIST_BASE64 != ''
        shell: bash
        run: |
          set -euo pipefail
          test -s ios/Runner/GoogleService-Info.plist || { echo "❌ Missing GoogleService-Info.plist"; exit 1; }
          PLIST_BID=$(/usr/libexec/PlistBuddy -c 'Print :BUNDLE_ID' ios/Runner/GoogleService-Info.plist)
          echo "Plist BUNDLE_ID: $PLIST_BID"
          echo "Env   BUNDLE_ID: ${BUNDLE_ID}"
          [ "$PLIST_BID" = "${BUNDLE_ID}" ] || { echo "❌ GoogleService-Info.plist BUNDLE_ID mismatch"; exit 1; }
          /usr/libexec/PlistBuddy -c 'Print :GOOGLE_APP_ID' ios/Runner/GoogleService-Info.plist >/dev/null

      - name: Verify build settings
        shell: bash
        run: |
          set -euxo pipefail
          xcodebuild -showBuildSettings \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release | egrep 'DEFINES_MODULE|BUILD_LIBRARY_FOR_DISTRIBUTION|SWIFT_OBJC_BRIDGING_HEADER' || true

      - name: Build IPA (signed)
        shell: bash
        run: |
          set -euxo pipefail
          flutter build ipa --release \
            --build-number "${GITHUB_RUN_NUMBER}" \
            --export-options-plist ios/ExportOptions.plist
          ls -lah build/ios/ipa || true
          ls -lah build/ios/archive || true

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fiinny-ipa
          path: build/ios/ipa/*.ipa
          if-no-files-found: error
          retention-days: 7

      - name: Upload xcarchive (debugging)
        uses: actions/upload-artifact@v4
        with:
          name: fiinny-xcarchive
          path: build/ios/archive/*.xcarchive
          if-no-files-found: warn
          retention-days: 7

      - name: Install Fastlane
        shell: bash
        run: |
          set -euxo pipefail
          sudo gem install fastlane -N

      - name: Create ASC API Key JSON
        shell: bash
        run: |
          set -euxo pipefail
          [[ -n "${APPLE_API_KEY_BASE64:-}" ]] || { echo "APPLE_API_KEY_BASE64 is missing"; exit 1; }
          [[ -n "${APPLE_KEY_ID:-}"        ]] || { echo "APPLE_KEY_ID is missing"; exit 1; }
          [[ -n "${APPLE_ISSUER_ID:-}"     ]] || { echo "APPLE_ISSUER_ID is missing"; exit 1; }
          echo "$APPLE_API_KEY_BASE64" | base64 --decode > "AuthKey_${APPLE_KEY_ID}.p8"
          chmod 600 "AuthKey_${APPLE_KEY_ID}.p8"
          python3 - <<'PY' > api_key.json
          import os, json
          kid = os.environ["APPLE_KEY_ID"]
          iss = os.environ["APPLE_ISSUER_ID"]
          with open(f"AuthKey_{kid}.p8","r") as f:
          key = f.read()
          print(json.dumps({"key_id": kid, "issuer_id": iss, "key": key}))
          PY

      - name: Upload to TestFlight
        env:
          PILOT_DISABLE_IMPLICIT_TEAM_SELECTION: "true"
        shell: bash
        run: |
          set -euxo pipefail
          IPA_PATH="$(ls -1 build/ios/ipa/*.ipa | head -n 1)"
          echo "Uploading: ${IPA_PATH}"
          fastlane pilot upload \
            --ipa "${IPA_PATH}" \
            --api_key_path api_key.json \
            --skip_submission \
            --skip_waiting_for_build_processing

      - name: Notify Slack (Success)
        if: success() && env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            { "text": "✅ Fiinny iOS build uploaded to TestFlight!" }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}

      - name: Notify Slack (Failure)
        if: failure() && env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            { "text": "❌ Fiinny iOS build failed. Check logs." }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
