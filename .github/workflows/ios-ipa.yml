#new version
name: iOS IPA (Flutter export + ASC upload)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "ios/**"
      - "lib/**"
      - "pubspec.*"
      - ".github/workflows/**"

concurrency:
  group: ios-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios:
    runs-on: macos-14
    env:
      BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
      TEAM_ID: ${{ secrets.TEAM_ID }}
      P12_BASE64: ${{ secrets.P12_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
      APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
      APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
      FIREBASE_IOS_PLIST_BASE64: ${{ secrets.FIREBASE_IOS_PLIST_BASE64 }}
      CI: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode (latest 16.x)
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Install CocoaPods & xcbeautify
        shell: bash
        run: |
          sudo gem install cocoapods -N || true
          brew install xcbeautify || true

      - name: flutter pub get
        run: flutter pub get

      - name: Clean and Enforce iOS 16
        run: |
          /usr/bin/sed -i '' "s/platform :ios, .*/platform :ios, '16.0'/" ios/Podfile || true
          rm -rf ios/Pods ios/Podfile.lock

      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update
          cd ..

      - name: Set Bundle ID & Team ID
        run: |
          PBX="ios/Runner.xcodeproj/project.pbxproj"
          sed -i '' "s/com\\.example\\.[A-Za-z0-9_-]*/${BUNDLE_ID}/g" "$PBX" || true
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = ${BUNDLE_ID};/g" "$PBX"
          sed -i '' "s/DEVELOPMENT_TEAM = [A-Z0-9]*;/DEVELOPMENT_TEAM = ${TEAM_ID};/g" "$PBX" || true

      - name: Create GoogleService-Info.plist
        run: |
          mkdir -p ios/Runner
          echo "$FIREBASE_IOS_PLIST_BASE64" | base64 --decode > ios/Runner/GoogleService-Info.plist

      - name: Add Google URL Scheme to Info.plist
        run: |
          GSP="ios/Runner/GoogleService-Info.plist"
          IP="ios/Runner/Info.plist"
          RID=$(/usr/libexec/PlistBuddy -c 'Print :REVERSED_CLIENT_ID' "$GSP")
          /usr/libexec/PlistBuddy -c 'Delete :CFBundleURLTypes' "$IP" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c 'Add :CFBundleURLTypes array' "$IP"
          /usr/libexec/PlistBuddy -c 'Add :CFBundleURLTypes:0 dict' "$IP"
          /usr/libexec/PlistBuddy -c 'Add :CFBundleURLTypes:0:CFBundleTypeRole string Editor' "$IP"
          /usr/libexec/PlistBuddy -c 'Add :CFBundleURLTypes:0:CFBundleURLSchemes array' "$IP"
          /usr/libexec/PlistBuddy -c "Add :CFBundleURLTypes:0:CFBundleURLSchemes:0 string $RID" "$IP"

      - name: Create Keychain & Import Certificate
        run: |
          KEYCHAIN="$RUNNER_TEMP/build.keychain"
          KPWD=$(uuidgen)
          security create-keychain -p "$KPWD" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$KPWD" "$KEYCHAIN"
          echo "$P12_BASE64" | base64 --decode > cert.p12
          security import cert.p12 -k "$KEYCHAIN" -P "$P12_PASSWORD" -A
          security list-keychains -s "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"

      - name: Install Provisioning Profile
        run: |
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > "$RUNNER_TEMP/profile.mobileprovision"
          DECODED_PLIST="$RUNNER_TEMP/profile.plist"
          security cms -D -i "$RUNNER_TEMP/profile.mobileprovision" -o "$DECODED_PLIST"
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" "$DECODED_PLIST")
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" "$DECODED_PLIST")
          echo "PROFILE_NAME=$PROFILE_NAME" >> "$GITHUB_ENV"
          echo "PROFILE_UUID=$PROFILE_UUID" >> "$GITHUB_ENV"
          cp "$RUNNER_TEMP/profile.mobileprovision" "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"

      - name: Create ExportOptions.plist
        run: |
          EXPORT_OPTS="ios/ExportOptions.plist"
          /usr/libexec/PlistBuddy -c 'Clear dict' "$EXPORT_OPTS" || true
          /usr/libexec/PlistBuddy -c 'Add :method string app-store' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :signingStyle string manual' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c "Add :teamID string ${TEAM_ID}" "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :provisioningProfiles dict' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:${BUNDLE_ID} string ${PROFILE_NAME}" "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :stripSwiftSymbols bool true' "$EXPORT_OPTS"
          /usr/libexec/PlistBuddy -c 'Add :compileBitcode bool false' "$EXPORT_OPTS"

      - name: Bump Build Number
        run: |
          version_line=$(grep '^version:' pubspec.yaml)
          version_number=$(echo $version_line | cut -d ":" -f2 | xargs)
          base_version=$(echo $version_number | cut -d "+" -f1)
          echo "version: $base_version+${GITHUB_RUN_NUMBER}" > temp.yaml
          tail -n +2 pubspec.yaml >> temp.yaml
          mv temp.yaml pubspec.yaml

      - name: Build IPA
        run: |
          flutter build ipa --release \
            --build-number "${GITHUB_RUN_NUMBER}" \
            --export-options-plist ios/ExportOptions.plist

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fiinny-ipa
          path: build/ios/ipa/*.ipa

      - name: Upload ExportOptions.plist
        uses: actions/upload-artifact@v4
        with:
          name: export-options
          path: ios/ExportOptions.plist

      - name: Install Fastlane
        run: sudo gem install fastlane -N

      - name: Create ASC API Key JSON
        run: |
          echo "$APPLE_API_KEY_BASE64" | base64 --decode > "AuthKey_${APPLE_KEY_ID}.p8"
          python3 -c 'import os,json; kid=os.environ["APPLE_KEY_ID"]; iss=os.environ["APPLE_ISSUER_ID"]; key=open(f"AuthKey_{kid}.p8","r").read(); print(json.dumps({"key_id":kid,"issuer_id":iss,"key":key}))' > api_key.json

      - name: Upload to TestFlight
        run: |
          fastlane pilot upload \
            --ipa build/ios/ipa/*.ipa \
            --api_key_path api_key.json \
            --skip_submission \
            --skip_waiting_for_build_processing

      - name: Notify Slack (Success)
        if: success() && env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: '{"text": "✅ Fiinny iOS build uploaded to TestFlight!"}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack (Failure)
        if: failure() && env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: '{"text": "❌ Fiinny iOS build failed. Please check logs."}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
